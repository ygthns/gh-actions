trigger:
- none

pool:
  name: Ansible Server
  demands:
  - Agent.Name -equals Ansible-Server- USATL-CORP-DEMO-GRAFANA

variables:

    # Libraries
  - group: lb-test-variables

  - group: lb-dev-variables

    # Variables
  - name: sftpServer
    value: '192.168.1.232'

  - name: devServer
    value: '192.168.1.235'

  - name: testServer
    value: '192.168.1.223'

  - name: pipelineUser
    value: 'runner'

  - name: config_repo
    value: 'git@ssh.dev.azure.com:v3/ysaglam/CICD-testing/CICD-testing'

steps:

- task: Bash@3
  displayName: 'Detect the version change type, and send it to the proper server'
  inputs:
    targetType: 'inline'
    script: |
      eval "$(ssh-agent -s)"
      ssh-add /home/runner/.ssh/id_rsa
      ssh -A runner@192.168.1.232 << 'EOL'
      echo "Local system name: $HOSTNAME"
      echo "Local date and time: $(date)"
      new_tagname=$(ls -1 /home/Builds/SeerPortal/seerportal_v* | sort -r | head -n 1 | awk -F '_' '{print substr($3, 1)}')
      old_tagname=$(ls -1 /home/Builds/SeerPortal/seerportal_v* | sort -r | awk -F '_' '{print substr($3, 1)}' | head -n 2 | tail -n 1)
      new_version=$(ls -1 /home/Builds/SeerPortal/seerportal_v* | sort -r | head -n 1 | awk -F '_' '{print substr($2, 1)}')
      old_version=$(ls -1 /home/Builds/SeerPortal/seerportal_v* | sort -r | awk -F '_' '{print substr($2, 1)}' | head -n 2 | tail -n 1)
      echo "##vso[task.setvariable variable=new_tagname;isOutput=true]$new_tagname"
      echo "##vso[task.setvariable variable=old_tagname;isOutput=true]$old_tagname"
      echo "##vso[task.setvariable variable=new_version;isOutput=true]$new_version"
      echo "##vso[task.setvariable variable=old_version;isOutput=true]$old_version"
      latest_version=$(ls -1 /home/Builds/SeerPortal/seerportal_v* | sort -r | head -n 1 | awk -F '_' '{print substr($2, 2)}')
      second_latest_version=$(ls -1 /home/Builds/SeerPortal/seerportal_v* | sort -r | awk -F '_' '{print substr($2, 2)}' | head -n 2 | tail -n 1)
            # Extract the major and minor version numbers
      latest_first_digit=$(echo $latest_version | awk -F '.' '{print $1}')
      latest_second_digit=$(echo $latest_version | awk -F '.' '{print $2}')
      latest_third_digit=$(echo $latest_version | awk -F '.' '{print $3}')
      second_latest_first_digit=$(echo $second_latest_version | awk -F '.' '{print $1}')
      second_latest_second_digit=$(echo $second_latest_version | awk -F '.' '{print $2}')
      second_latest_third_digit=$(echo $second_latest_version | awk -F '.' '{print $3}')
            # Compare the versions
      if [[ "$latest_first_digit" -eq "$second_latest_first_digit" && "$latest_second_digit" -eq "$second_latest_second_digit" ]]; then
            # If the change is minor, send it to the dev server
        target_build=$(find /home/Builds/SeerPortal/ -name  "seerportal_v${latest_version}_*.tar.gz")
        echo "Minor change detected, build ${target_build} will be deployed on the Dev Server"
        scp ${target_build} seerportaluser@192.168.1.235:/home/seerportal/
        _SERVER="dev"
        echo "##vso[task.setvariable variable=_SERVER;isOutput=true]$_SERVER"
      else
              # If the change is major, send it to the test server
        target_build=$(find /home/Builds/SeerPortal/ -name  "seerportal_v${latest_version}_*.tar.gz")
        echo "Major change detected, build ${target_build} will be deployed on the Test Server"
        scp ${target_build} seerportaluser@192.168.1.223:/home/seerportal/
        _SERVER="test"
        echo "##vso[task.setvariable variable=_SERVER;isOutput=true]$_SERVER"
      fi
      EOL
  name: detection_step
  
# - checkout: self
- task: Bash@3
  displayName: 'Clone the proper repo for the config files.'
  inputs:
    targetType: 'inline'
    script: |
      if [ -d "/home/runner/seer_config" ]; then
        rm -rf /home/runner/seer_config
      fi
      mkdir /home/runner/seer_config
      if [ -d "/home/runner/CICD-testing" ]; then
        rm -rf /home/runner/CICD-testing
      fi
      git clone -b "$BRANCH" git@ssh.dev.azure.com:v3/ysaglam/CICD-testing/CICD-testing /home/runner/CICD-testing
      cp /home/runner/CICD-testing/deploy_seerportal.sh /home/runner/seer_config/
  env:
    BRANCH: $(detection_step._SERVER)

- task: Bash@3
  displayName: 'Render the template for ecosystem.config.js.'
  inputs:
    targetType: 'inline'
    script: |
      if [ "$BRANCH" == "test" ]; then
        jinja2 /home/runner/CICD-testing/ecosystem.config.j2 -D ecosystem_user="$TEST_ECOSYSTEM_USER" -D ecosystem_repo="$TEST_ECOSYSTEM_REPO" -D ecosystem_ref="$TEST_ECOSYSTEM_REF" -D ecosystem_path="$TEST_ECOSYSTEM_PATH" -D ecosystem_host="$TEST_ECOSYSTEM_HOST" > /home/runner/seer_config/ecosystem.config.js
      elif [ "$BRANCH" == "dev" ]; then
        jinja2 /home/runner/CICD-testing/ecosystem.config.j2 -D ecosystem_user="$DEV_ECOSYSTEM_USER" -D ecosystem_repo="$DEV_ECOSYSTEM_REPO" -D ecosystem_ref="$DEV_ECOSYSTEM_REF" -D ecosystem_path="$DEV_ECOSYSTEM_PATH" -D ecosystem_host="$DEV_ECOSYSTEM_HOST" > /home/runner/seer_config/ecosystem.config.js
      else
        echo "Unsupported branch: $BRANCH"
        exit 1
      fi
  env:
    DEV_ECOSYSTEM_USER:  $(dev-ecosystem-user)
    DEV_ECOSYSTEM_REPO:  $(dev-ecosystem-repo)
    DEV_ECOSYSTEM_REF:   $(dev-ecosystem-ref)
    DEV_ECOSYSTEM_PATH:  $(dev-ecosystem-path)
    DEV_ECOSYSTEM_HOST:  $(dev-ecosystem-host)
    TEST_ECOSYSTEM_USER: $(test-ecosystem-user)
    TEST_ECOSYSTEM_REPO: $(test-ecosystem-repo)
    TEST_ECOSYSTEM_REF:  $(test-ecosystem-ref)
    TEST_ECOSYSTEM_PATH: $(test-ecosystem-path)
    TEST_ECOSYSTEM_HOST: $(test-ecosystem-host)
    BRANCH:              $(detection_step._SERVER)

- task: Bash@3
  displayName: 'Render the template for config/production.js'
  inputs:
    targetType: 'inline'
    script: |
      if [ "$BRANCH" == "test" ]; then
        jinja2 /home/runner/CICD-testing/production.j2 -D test_production_mysql_host="$TEST_PRODUCTION_MYSQL_HOST" -D test_production_mysql_user="$TEST_PRODUCTION_MYSQL_USER" -D test_production_mysql_password="$TEST_PRODUCTION_MYSQL_PASSWORD" -D test_production_mysql_database="$TEST_PRODUCTION_MYSQL_DATABASE" -D test_production_googleMapApiKey="$TEST_PRODUCTION_GOOGLEMAPAPIKEY" -D test_production_ipGeoLocationApiKey="$TEST_PRODUCTION_IPGEOLOCATIONAPIKEY" -D test_production_whoisApiKey="$TEST_PRODUCTION_WHOISAPIKEY" -D test_production_ipStackApiKey="$TEST_PRODUCTION_IPSTACKAPIKEY" -D test_production_redis_host="$TEST_PRODUCTION_REDIS_HOST" -D test_production_redis_port="$TEST_PRODUCTION_REDIS_PORT" -D test_production_scheduler_url="$TEST_PRODUCTION_SCHEDULER_URL" -D test_production_scheduler_port="$TEST_PRODUCTION_SCHEDULER_PORT" -D test_production_kafka_ip="$TEST_PRODUCTION_KAFKA_IP" -D test_production_kafka_port="$TEST_PRODUCTION_KAFKA_PORT" -D test_production_eslog_node="$TEST_PRODUCTION_ESLOG_NODE" -D test_production_eslog_username="$TEST_PRODUCTION_ESLOG_USERNAME" -D test_production_eslog_password="$TEST_PRODUCTION_ESLOG_PASSWORD" -D test_production_sslConfig_keyFile="$TEST_PRODUCTION_SSLCONFIG_KEYFILE" -D test_production_sslConfig_certFile="$TEST_PRODUCTION_SSLCONFIG_CERTFILE" -D test_production_sslConfig_passPhrase="$TEST_PRODUCTION_SSLCONFIG_PASSPHRASE" -D test_production_sslConfig_hpccKeyFile="$TEST_PRODUCTION_SSLCONFIG_HPCCKEYFILE" -D test_production_sslConfig_masterCardKeyFile="$TEST_PRODUCTION_SSLCONFIG_MASTERCARDKEYFILE" -D test_production_masterCardConsumerKey="$TEST_PRODUCTION_MASTERCARDCONSUMERKEY" -D test_production_serverAuth_accessKey="$TEST_PRODUCTION_SERVERAUTH_ACCESSKEY" -D test_production_serverAuth_ip="$TEST_PRODUCTION_SERVERAUTH_IP" -D test_production_sendGrid_apiKey="$TEST_PRODUCTION_SENDGRID_APIKEY" -D test_production_crypto_config_password="$TEST_PRODUCTION_CRYPTO_CONFIG_PASSWORD" -D test_production_crypto_config_ivString="$TEST_PRODUCTION_CRYPTO_CONFIG_IVSTRING" -D test_production_identitySeer_org_id="$TEST_PRODUCTION_IDENTITYSEER_ORG_ID" -D test_production_identitySeer_api_key="$TEST_PRODUCTION_IDENTITYSEER_API_KEY" -D test_production_ln_kyc_url_username="$TEST_PRODUCTION_LN_KYC_URL_USERNAME" -D test_production_ln_kyc_url_password="$TEST_PRODUCTION_LN_KYC_URL_PASSWORD" -D test_production_ln_soap_url_username="$TEST_PRODUCTION_LN_SOAP_URL_USERNAME" -D test_production_ln_soap_url_password="$TEST_PRODUCTION_LN_SOAP_URL_PASSWORD" -D test_production_sar_config_username="$TEST_PRODUCTION_SAR_CONFIG_USERNAME" -D test_production_clamdConfig_socket="$TEST_PRODUCTION_CLAMDCONFIG_SOCKET" -D test_production_clamdConfig_host="$TEST_PRODUCTION_CLAMDCONFIG_HOST" -D test_production_clamdConfig_port="$TEST_PRODUCTION_CLAMDCONFIG_PORT" -D test_production_openCorporateApiKey="$TEST_PRODUCTION_OPENCORPORATEAPIKEY" > /home/runner/seer_config/production.js
      fi
      if [ "$BRANCH" == "dev" ]; then
        jinja2 /home/runner/CICD-testing/production.j2 -D dev_production_mysql_host="$DEV_PRODUCTION_MYSQL_HOST" -D dev_production_mysql_user="$DEV_PRODUCTION_MYSQL_USER" -D dev_production_mysql_password="$DEV_PRODUCTION_MYSQL_PASSWORD" -D dev_production_mysql_database="$DEV_PRODUCTION_MYSQL_DATABASE" -D dev_production_googleMapApiKey="$DEV_PRODUCTION_GOOGLEMAPAPIKEY" -D dev_production_ipGeoLocationApiKey="$DEV_PRODUCTION_IPGEOLOCATIONAPIKEY" -D dev_production_whoisApiKey="$DEV_PRODUCTION_WHOISAPIKEY" -D dev_production_ipStackApiKey="$DEV_PRODUCTION_IPSTACKAPIKEY" -D dev_production_redis_host="$DEV_PRODUCTION_REDIS_HOST" -D dev_production_redis_port="$DEV_PRODUCTION_REDIS_PORT" -D dev_production_redis_password="$DEV_PRODUCTION_REDIS_PASSWORD" -D dev_production_scheduler_url="$DEV_PRODUCTION_SCHEDULER_URL" -D dev_production_scheduler_port="$DEV_PRODUCTION_SCHEDULER_PORT" -D dev_production_kafka_ip="$DEV_PRODUCTION_KAFKA_IP" -D dev_production_kafka_port="$DEV_PRODUCTION_KAFKA_PORT" -D dev_production_eslog_node="$DEV_PRODUCTION_ESLOG_NODE" -D dev_production_eslog_username="$DEV_PRODUCTION_ESLOG_USERNAME" -D dev_production_eslog_password="$DEV_PRODUCTION_ESLOG_PASSWORD" -D dev_production_sslConfig_keyFile="$DEV_PRODUCTION_SSLCONFIG_KEYFILE" -D dev_production_sslConfig_certFile="$DEV_PRODUCTION_SSLCONFIG_CERTFILE" -D dev_production_sslConfig_passPhrase="$DEV_PRODUCTION_SSLCONFIG_PASSPHRASE" -D dev_production_sslConfig_masterCardKeyFile="$DEV_PRODUCTION_SSLCONFIG_MASTERCARDKEYFILE" -D dev_production_sslConfig_hpccKeyFile="$DEV_PRODUCTION_SSLCONFIG_HPCCKEYFILE" -D dev_production_sslConfig_masterCardKeyFile="$DEV_PRODUCTION_SSLCONFIG_MASTERCARDKEYFILE" -D dev_production_masterCardConsumerKey="$DEV_PRODUCTION_MASTERCARDCONSUMERKEY" -D dev_production_serverAuth_accessKey="$DEV_PRODUCTION_SERVERAUTH_ACCESSKEY" -D dev_production_serverAuth_ip="$DEV_PRODUCTION_SERVERAUTH_IP" -D dev_production_sendGrid_apiKey="$DEV_PRODUCTION_SENDGRID_APIKEY" -D dev_production_crypto_config_password="$DEV_PRODUCTION_CRYPTO_CONFIG_PASSWORD" -D dev_production_crypto_config_ivString="$DEV_PRODUCTION_CRYPTO_CONFIG_IVSTRING" -D dev_production_identitySeer_org_id="$DEV_PRODUCTION_IDENTITYSEER_ORG_ID" -D dev_production_identitySeer_api_key="$DEV_PRODUCTION_IDENTITYSEER_API_KEY" -D dev_production_ln_kyc_url_username="$DEV_PRODUCTION_LN_KYC_URL_USERNAME" -D dev_production_ln_kyc_url_password="$DEV_PRODUCTION_LN_KYC_URL_PASSWORD" -D dev_production_ln_soap_url_username="$DEV_PRODUCTION_LN_SOAP_URL_USERNAME" -D dev_production_ln_soap_url_password="$DEV_PRODUCTION_LN_SOAP_URL_PASSWORD" -D dev_production_sar_config_username="$DEV_PRODUCTION_SAR_CONFIG_USERNAME" -D dev_production_clamdConfig_socket="$DEV_PRODUCTION_CLAMDCONFIG_SOCKET" -D dev_production_clamdConfig_host="$DEV_PRODUCTION_CLAMDCONFIG_HOST" -D dev_production_clamdConfig_port="$DEV_PRODUCTION_CLAMDCONFIG_PORT" -D dev_production_openCorporateApiKey="$DEV_PRODUCTION_OPENCORPORATEAPIKEY" > /home/runner/seer_config/production.js
      else
        echo "Unsupported branch: $BRANCH"
        exit 1
      fi
  env:
    DEV_PRODUCTION_MYSQL_HOST:                   $(dev-production-mysql-host)
    DEV_PRODUCTION_MYSQL_USER:                   $(dev-production-mysql-user)
    DEV_PRODUCTION_MYSQL_PASSWORD:               $(dev-production-mysql-password)
    DEV_PRODUCTION_MYSQL_DATABASE:               $(dev-production-mysql-database)
    DEV_PRODUCTION_GOOGLEMAPAPIKEY:              $(dev-production-googleMapApiKey)
    DEV_PRODUCTION_IPGEOLOCATIONAPIKEY:          $(dev-production-ipGeoLocationApiKey)
    DEV_PRODUCTION_WHOISAPIKEY:                  $(dev-production-whoisApiKey)
    DEV_PRODUCTION_IPSTACKAPIKEY:                $(dev-production-ipStackApiKey)
    DEV_PRODUCTION_REDIS_HOST:                   $(dev-production-redis-host)
    DEV_PRODUCTION_REDIS_PORT:                   $(dev-production-redis-port)
    DEV_PRODUCTION_REDIS_PASSWORD:               $(dev-production-redis-password)
    DEV_PRODUCTION_SCHEDULER_URL:                $(dev-production-scheduler-url)
    DEV_PRODUCTION_SCHEDULER_PORT:               $(dev-production-scheduler-port)
    DEV_PRODUCTION_KAFKA_IP:                     $(dev-production-kafka-ip)
    DEV_PRODUCTION_KAFKA_PORT:                   $(dev-production-kafka-port)
    DEV_PRODUCTION_ESLOG_NODE:                   $(dev-production-eslog-node)
    DEV_PRODUCTION_ESLOG_USERNAME:               $(dev-production-eslog-username)
    DEV_PRODUCTION_ESLOG_PASSWORD:               $(dev-production-eslog-password)
    DEV_PRODUCTION_SSLCONFIG_KEYFILE:            $(dev-production-sslConfig-keyFile)
    DEV_PRODUCTION_SSLCONFIG_CERTFILE:           $(dev-production-sslConfig-certFile)
    DEV_PRODUCTION_SSLCONFIG_PASSPHRASE:         $(dev-production-sslConfig-passPhrase)
    DEV_PRODUCTION_SSLCONFIG_MASTERCARDKEYFILE:  $(dev-production-sslConfig-masterCardKeyFile)
    DEV_PRODUCTION_MASTERCARDCONSUMERKEY:        $(dev-production-masterCardConsumerKey)
    DEV_PRODUCTION_SERVERAUTH_ACCESSKEY:         $(dev-production-serverAuth-accessKey)
    DEV_PRODUCTION_SERVERAUTH_IP:                $(dev-production-serverAuth-ip)
    DEV_PRODUCTION_SENDGRID_APIKEY:              $(dev-production-sendGrid-apiKey)
    DEV_PRODUCTION_CRYPTO_CONFIG_PASSWORD:       $(dev-production-crypto_config-password)
    DEV_PRODUCTION_CRYPTO_CONFIG_IVSTRING:       $(dev-production-crypto_config-ivString)
    DEV_PRODUCTION_LN_KYC_URL_USERNAME:          $(dev-production-ln_kyc_url-username)
    DEV_PRODUCTION_LN_KYC_URL_PASSWORD:          $(dev-production-ln_kyc_url-password)
    DEV_PRODUCTION_LN_SOAP_URL_USERNAME:         $(dev-production-ln-soap-url-username)
    DEV_PRODUCTION_LN_SOAP_URL_PASSWORD:         $(dev-production-ln-soap-url-password)
    DEV_PRODUCTION_SAR_CONFIG_USERNAME:          $(dev-production-sar-config-username)
    DEV_PRODUCTION_CLAMDCONFIG_SOCKET:           $(dev_production_clamdconfig_socket)
    DEV_PRODUCTION_CLAMDCONFIG_HOST:             $(dev_production_clamdconfig_host)
    DEV_PRODUCTION_CLAMDCONFIG_PORT:             $(dev_production_clamdconfig_port)
    DEV_PRODUCTION_IDENTITYSEER_API_KEY:         $(dev-production-identitySeer-api-key)
    DEV_PRODUCTION_IDENTITYSEER_ORG_ID:          $(dev-production-identitySeer-org-id)
    DEV_PRODUCTION_OPENCORPORATEAPIKEY:          $(dev-production-openCorporateApiKey)
    TEST_PRODUCTION_MYSQL_HOST:                  $(test-production-mysql-host)
    TEST_PRODUCTION_MYSQL_USER:                  $(test-production-mysql-user)
    TEST_PRODUCTION_MYSQL_PASSWORD:              $(test-production-mysql-password)
    TEST_PRODUCTION_MYSQL_DATABASE:              $(test-production-mysql-database)
    TEST_PRODUCTION_GOOGLEMAPAPIKEY:             $(test-production-googleMapApiKey)
    TEST_PRODUCTION_IPGEOLOCATIONAPIKEY:         $(test-production-ipGeoLocationApiKey)
    TEST_PRODUCTION_WHOISAPIKEY:                 $(test-production-whoisApiKey)
    TEST_PRODUCTION_IPSTACKAPIKEY:               $(test-production-ipStackApiKey)
    TEST_PRODUCTION_REDIS_HOST:                  $(test-production-redis-host)
    TEST_PRODUCTION_REDIS_PORT:                  $(test-production-redis-port)
    TEST_PRODUCTION_SCHEDULER_URL:               $(test-production-scheduler-url)
    TEST_PRODUCTION_SCHEDULER_PORT:              $(test-production-scheduler-port)
    TEST_PRODUCTION_KAFKA_IP:                    $(test-production-kafka-ip)
    TEST_PRODUCTION_KAFKA_PORT:                  $(test-production-kafka-port)
    TEST_PRODUCTION_ESLOG_NODE:                  $(test-production-eslog-node)
    TEST_PRODUCTION_ESLOG_USERNAME:              $(test-production-eslog-username)
    TEST_PRODUCTION_ESLOG_PASSWORD:              $(test-production-eslog-password)
    TEST_PRODUCTION_SSLCONFIG_KEYFILE:           $(test-production-sslConfig-keyFile)
    TEST_PRODUCTION_SSLCONFIG_CERTFILE:          $(test-production-sslConfig-certFile)
    TEST_PRODUCTION_SSLCONFIG_PASSPHRASE:        $(test-production-sslConfig-passPhrase)
    TEST_PRODUCTION_SSLCONFIG_HPCCKEYFILE:       $(test-production-sslConfig-hpccKeyFile)
    TEST_PRODUCTION_SSLCONFIG_MASTERCARDKEYFILE: $(test-production-sslConfig-masterCardKeyFile)
    TEST_PRODUCTION_MASTERCARDCONSUMERKEY:       $(test-production-masterCardConsumerKey)
    TEST_PRODUCTION_SERVERAUTH_ACCESSKEY:        $(test-production-serverAuth-accessKey)
    TEST_PRODUCTION_SERVERAUTH_IP:               $(test-production-serverAuth-ip)
    TEST_PRODUCTION_SENDGRID_APIKEY:             $(test-production-sendGrid-apiKey)
    TEST_PRODUCTION_CRYPTO_CONFIG_PASSWORD:      $(test-production-crypto_config-password)
    TEST_PRODUCTION_CRYPTO_CONFIG_IVSTRING:      $(test-production-crypto_config-ivString)
    TEST_PRODUCTION_IDENTITYSEER_ORG_ID:         $(test-production-identitySeer-org_id)
    TEST_PRODUCTION_IDENTITYSEER_API_KEY:        $(test-production-identitySeer-api_key)
    TEST_PRODUCTION_LN_KYC_URL_USERNAME:         $(test-production-ln_kyc_url-username)
    TEST_PRODUCTION_LN_KYC_URL_PASSWORD:         $(test-production-ln_kyc_url-password)
    TEST_PRODUCTION_LN_SOAP_URL_USERNAME:        $(test-production-ln_soap_url-username)
    TEST_PRODUCTION_LN_SOAP_URL_PASSWORD:        $(test-production-ln_soap_url-password)
    TEST_PRODUCTION_SAR_CONFIG_USERNAME:         $(test-production-sar_config-username)
    TEST_PRODUCTION_CLAMDCONFIG_SOCKET:          $(test-production-clamdConfig-socket)
    TEST_PRODUCTION_CLAMDCONFIG_HOST:            $(test-production-clamdConfig-host)
    TEST_PRODUCTION_CLAMDCONFIG_PORT:            $(test-production-clamdConfig-port)
    TEST_PRODUCTION_OPENCORPORATEAPIKEY:         $(test-production-openCorporateApiKey)
    BRANCH:                                      $(detection_step._SERVER)

- task: Bash@3
  displayName: 'Render the template for migrations/config/config.json'
  inputs:
    targetType: 'inline'
    script: |
      if [ "$BRANCH" == "test" ]; then
        jinja2 /home/runner/CICD-testing/config.j2 \
          -D test_config_username="$TEST_CONFIG_USERNAME" \
          -D test_config_password="$TEST_CONFIG_PASSWORD" \
          -D test_config_database="$TEST_CONFIG_DATABASE" \
          -D test_config_host="$TEST_CONFIG_HOST" \
          -D test_config_port="$TEST_CONFIG_PORT" > /home/runner/seer_config/config.json
      elif [ "$BRANCH" == "dev" ]; then
        jinja2 /home/runner/CICD-testing/config.j2 \
          -D dev_config_username="$DEV_CONFIG_USERNAME" \
          -D dev_config_password="$DEV_CONFIG_PASSWORD" \
          -D dev_config_database="$DEV_CONFIG_DATABASE" \
          -D dev_config_host="$DEV_CONFIG_HOST" \
          -D dev_config_port="$DEV_CONFIG_PORT" > /home/runner/seer_config/config.json
        ls -alh /home/runner/
      else
        echo "Unsupported branch: $BRANCH"
        exit 1
      fi
  env:
    TEST_CONFIG_USERNAME: $(test-config-username)
    TEST_CONFIG_PASSWORD: $(test-config-password)
    TEST_CONFIG_DATABASE: $(test-config-database)
    TEST_CONFIG_HOST:     $(test-config-host)
    TEST_CONFIG_PORT:     $(test-config-port)
    DEV_CONFIG_USERNAME:  $(dev-config-username)
    DEV_CONFIG_PASSWORD:  $(dev-config-password)
    DEV_CONFIG_DATABASE:  $(dev-config-database)
    DEV_CONFIG_HOST:      $(dev-config-host)
    DEV_CONFIG_PORT:      $(dev-config-port)
    BRANCH:               $(detection_step._SERVER)

- task: CopyFilesOverSSH@0
  displayName: 'Transfer the config files to dev server.'
  inputs:
    sshEndpoint: 'devSR'
    sourceFolder: '/home/runner/seer_config/'
    contents: '**'
    targetFolder: '/home/seerportaluser/deployment_files/'
    readyTimeout: '20000'
    failOnEmptySource: true
  condition: eq(variables['detection_step._SERVER'], 'dev')

- task: CopyFilesOverSSH@0
  displayName: 'Transfer the config files to test server.'
  inputs:
    sshEndpoint: 'testSR'
    sourceFolder: '/home/runner/seer_config/'
    contents: '**'
    targetFolder: '/home/seerportaluser/deployment_files/'
    readyTimeout: '20000'
    failOnEmptySource: true
  condition: eq(variables['detection_step._SERVER'], 'test')

- task: Bash@3
  displayName: 'Deploy on dev'
  inputs:
    targetType: 'inline'
    script: |
      ssh -A -o "StrictHostKeyChecking no" -i ~/.ssh/id_rsa seerportaluser@192.168.1.235 << 'EOL'
      chmod 770 /home/seerportaluser/deployment_files/deploy_seerportal.sh
      mv /home/seerportaluser/deployment_files/deploy_seerportal.sh /home/seerportal/
      TAR_PATH=$(ls -t /home/seerportal/seerportal_v* | head -1)
      cd /home/seerportal/
      echo "print new version: $(detection_step.new_version) and print old version: $(detection_step.old version)"
      #/home/seerportal/deploy_seerportal.sh "$NEW_VERSION"_"$NEW_TAGNAME" "$TAR_PATH" "$OLD_VERSION"_"$OLD_TAGNAME"
      EOL
  condition: eq(variables['detection_step._SERVER'], 'dev')


- task: Bash@3
  displayName: 'Deploy on test'
  inputs:
    targetType: 'inline'
    script: |
      ssh -A -o "StrictHostKeyChecking no" -i ~/.ssh/id_rsa seerportaluser@192.168.1.223 << 'EOL'
      # mv /home/seerportaluser/deployment_files/deploy_seerportal.sh /home/seerportal/
      # TAR_PATH=$(ls -t /home/seerportal/seerportal_v* | head -1)
      # /home/seerportal/deploy_seerportal.sh "$NEW_VERSION"_"$NEW_TAGNAME" "$TAR_PATH" "$OLD_VERSION"_"$OLD_TAGNAME"
      EOL
  condition: eq(variables['detection_step._SERVER'], 'test')
  env:
    NEW_TAGNAME: $(detection_step.new_tagname)
    OLD_TAGNAME: $(detection_step.old_tagname)
    NEW_VERSION: $(detection_step.new_version)
    OLD_VERSION: $(detection_step.old_version)
