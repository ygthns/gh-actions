trigger:
- none

pool:
  name: Ansible Server
  demands:
  - Agent.Name -equals Ansible-Server- USATL-CORP-DEMO-GRAFANA

variables:
  sftpServer: '192.168.1.232'
  devServer: '192.168.1.235'
  testServer: '192.168.1.223'

steps:
- task: Bash@3
  displayName: 'Detect the version change type, and send it to the proper server'
  inputs:
    targetType: 'inline'
    script: |
      eval "$(ssh-agent -s)"
      ssh-add ~/.ssh/id
      ssh -A -o "StrictHostKeyChecking no" -i ~/.ssh/id_rsa runner@192.168.1.232 << 'EOL'

      echo "Local system name: $HOSTNAME"
      echo "Local date and time: $(date)"

      latest_version=$(ls -1 /home/Builds/SeerPortal/seerportal_v* | sort -r | head -n 1 | awk -F '_' '{print substr($2, 2)}')
      second_latest_version=$(ls -1 /home/Builds/SeerPortal/seerportal_v* | sort -r | awk -F '_' '{print substr($2, 2)}' | head -n 2 | tail -n 1)

            # Extract the major and minor version numbers
      latest_first_digit=$(echo $latest_version | awk -F '.' '{print $1}')
      latest_second_digit=$(echo $latest_version | awk -F '.' '{print $2}')
      latest_third_digit=$(echo $latest_version | awk -F '.' '{print $3}')

      second_latest_first_digit=$(echo $second_latest_version | awk -F '.' '{print $1}')
      second_latest_second_digit=$(echo $second_latest_version | awk -F '.' '{print $2}')
      second_latest_third_digit=$(echo $second_latest_version | awk -F '.' '{print $3}')

            # Compare the versions
      if [[ "$latest_first_digit" -eq "$second_latest_first_digit" && "$latest_second_digit" -eq "$second_latest_second_digit" ]]; then
            # If the change is minor, send it to the dev server
        target_build=$(find /home/Builds/SeerPortal/ -name  "seerportal_v${latest_version}_*.tar.gz")
        build="${seerportal_v${latest_version}_*.tar.gz}"
        echo "##vso[task.setvariable variable=build;isOutput=true]$build"
        echo "Minor change detected, build ${target_build} will be deployed on the Dev Server"
        scp ${target_build} seerportaluser@172.18.1.232:/home/seerportaluser/
        _SERVER="dev"
        echo "##vso[task.setvariable variable=_SERVER;isOutput=true]$_SERVER"
      else
              # If the change is major, send it to the test server
        target_build=$(find /home/Builds/SeerPortal/ -name  "seerportal_v${latest_version}_*.tar.gz")
        echo "Major change detected, build ${target_build} will be deployed on the Test Server"
        scp ${target_build} seerportaluser@192.168.1.223:/home/seerportaluser/
        _SERVER="test"
        echo "##vso[task.setvariable variable=_SERVER;isOutput=true]$_SERVER"
      fi
      EOL
  name: detection_step
  
- task: SSH@0
  inputs:
    sshEndpoint: 'devSR'
    runOptions: 'commands'
    commands: 'echo "$(detection_step.build)"'
    readyTimeout: '20000'
  condition: eq(variables['detection_step._SERVER'], 'dev')

- task: SSH@0
  inputs:
    sshEndpoint: 'testSR'
    runOptions: 'commands'
    commands: 'echo "$(detection_step.build)"'
    readyTimeout: '20000'
  condition: eq(variables['detection_step._SERVER'], 'test')


# - task: Bash@3
#   displayName: 'Copy to Dev or Test server based on version change'
#   condition: and(succeeded(), eq(variables['Agent.JobStatus'], 'Succeeded'))
#   inputs:
#     targetType: 'inline'
#     script: |
#       if [ "$(versionChange)" == "major" ]; then
#         sshpass -p "$(devServerPassword)" scp -o StrictHostKeyChecking=no $(find $(Build.ArtifactStagingDirectory) -name 'seerportal_*') "$(devServerUser)@$(devServer):/home/seerportal/"
#         echo "Copying to Dev server"
#       else
#         sshpass -p "$(testServerPassword)" scp -o StrictHostKeyChecking=no $(find $(Build.ArtifactStagingDirectory) -name 'seerportal_*') "$(testServerUser)@$(testServer):/home/seerportal/"
#         echo "Copying to Test server"
#       fi

# - task: Bash@3
#   displayName: 'Trigger Ansible playbook'
#   condition: and(succeeded(), eq(variables['Agent.JobStatus'], 'Succeeded'))
#   inputs:
#     targetType: 'inline'
#     script: |
#       if [ "$(versionChange)" == "major" ]; then
#         ansible-playbook ansible/deploy_to_dev.yml -i ansible/hosts --extra-vars "version=$(new_version) build=$(new_build) current_version=$(current_version)"
#       else
#         ansible-playbook ansible/deploy_to_test.yml -i ansible/hosts --extra-vars "version=$(new_version) build=$(new_build) current_version=$(current_version)"
#       fi
