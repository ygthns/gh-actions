trigger:
- none

pool:
  name: Ansible Server
  demands:
  - Agent.Name -equals Ansible-Server- USATL-CORP-DEMO-GRAFANA

variables:
  sftpServer: '192.168.1.232'
  devServer: '192.168.1.235'
  testServer: '192.168.1.223'

steps:
- task: Bash@3
  displayName: 'Detect the version change type, and send it to the proper server'
  inputs:
    targetType: 'inline'
    script: |
      ssh -o "StrictHostKeyChecking no" -i ~/.ssh/id_rsa runner@"${sftpServer}" << 'EOL'

      echo "Local system name: $HOSTNAME"
      echo "Local date and time: $(date)"
      ip a

      latest_version=$(ls -1 /home/Builds/SeerPortal/seerportal_v* | sort -r | head -n 1 | awk -F '_' '{print substr($2, 2)}')
      second_latest_version=$(ls -1 /home/Builds/SeerPortal/seerportal_v* | sort -r | awk -F '_' '{print substr($2, 2)}' | head -n 2 | tail -n 1)

            # Extract the major and minor version numbers
      latest_first_digit=$(echo $latest_version | awk -F '.' '{print $1}')
      latest_second_digit=$(echo $latest_version | awk -F '.' '{print $2}')
      latest_third_digit=$(echo $latest_version | awk -F '.' '{print $3}')

      second_latest_first_digit=$(echo $second_latest_version | awk -F '.' '{print $1}')
      second_latest_second_digit=$(echo $second_latest_version | awk -F '.' '{print $2}')
      second_latest_third_digit=$(echo $second_latest_version | awk -F '.' '{print $3}')

            # Compare the versions
      if [[ "$latest_first_digit" -eq "$second_latest_first_digit" && "$latest_second_digit" -eq "$second_latest_second_digit" ]]; then
            # If the change is minor, send it to the dev server
              #scp /home/Builds/SeerPortal/seerportal_${latest_version}_*.tar.gz runner@192.168.1.235:/path/to/dev/server/
        ls -alh "/home/Builds/SeerPortal/seerportal_${latest_version}_*.tar.gz"
      else
              # If the change is major, send it to the test server
              #scp /home/Builds/SeerPortal/seerportal_${latest_version}_*.tar.gz runner@192.168.1.223:/path/to/test/server/
        ls -alh "/home/Builds/SeerPortal/seerportal_${latest_version}_*.tar.gz"
      fi
      EOL



#       # Determine if the new build is a major or minor version change
#       current_version=$(echo "$latest_build" | sed -E 's/seerportal_([0-9]+\.[0-9]+\.[0-9]+)_.*/\1/')
#       new_build=$(find $(Build.ArtifactStagingDirectory) -name 'seerportal_*')
#       new_version=$(echo "$new_build" | sed -E 's/.*seerportal_([0-9]+\.[0-9]+\.[0-9]+)_.*/\1/')
#       major_version=$(echo "$current_version" | cut -d '.' -f 1)
#       new_major_version=$(echo "$new_version" | cut -d '.' -f 1)

#       if [ $new_major_version -gt $major_version ]; then
#         echo "##vso[task.setvariable variable=versionChange]major"
#       else
#         echo "##vso[task.setvariable variable=versionChange]minor"
#       fi

# - task: Bash@3
#   displayName: 'Copy to Dev or Test server based on version change'
#   condition: and(succeeded(), eq(variables['Agent.JobStatus'], 'Succeeded'))
#   inputs:
#     targetType: 'inline'
#     script: |
#       if [ "$(versionChange)" == "major" ]; then
#         sshpass -p "$(devServerPassword)" scp -o StrictHostKeyChecking=no $(find $(Build.ArtifactStagingDirectory) -name 'seerportal_*') "$(devServerUser)@$(devServer):/home/seerportal/"
#         echo "Copying to Dev server"
#       else
#         sshpass -p "$(testServerPassword)" scp -o StrictHostKeyChecking=no $(find $(Build.ArtifactStagingDirectory) -name 'seerportal_*') "$(testServerUser)@$(testServer):/home/seerportal/"
#         echo "Copying to Test server"
#       fi

# - task: Bash@3
#   displayName: 'Trigger Ansible playbook'
#   condition: and(succeeded(), eq(variables['Agent.JobStatus'], 'Succeeded'))
#   inputs:
#     targetType: 'inline'
#     script: |
#       if [ "$(versionChange)" == "major" ]; then
#         ansible-playbook ansible/deploy_to_dev.yml -i ansible/hosts --extra-vars "version=$(new_version) build=$(new_build) current_version=$(current_version)"
#       else
#         ansible-playbook ansible/deploy_to_test.yml -i ansible/hosts --extra-vars "version=$(new_version) build=$(new_build) current_version=$(current_version)"
#       fi
